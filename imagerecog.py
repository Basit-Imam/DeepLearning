# -*- coding: utf-8 -*-
"""ImageRecog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sT2q0KKrpx2y5u8Wk_uV-k-sMUnWRb7O
"""

import keras

from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from pathlib import Path
import numpy as np

(X_train, y_train), (x_test, y_test) = cifar10.load_data()

X_train = X_train.astype("float32")
x_test = x_test.astype("float32")
X_train /= 255
x_test /=255

y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same', activation = 'relu', input_shape=(32, 32, 3)))
model.add(Conv2D(32, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding = 'same', activation = 'relu'))
model.add(Conv2D(64, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512, activation = 'relu'))
model.add(Dropout(0.50))
model.add(Dense(10, activation = 'softmax'))

model.summary()

model.compile(loss = "categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

model.fit(X_train, y_train, batch_size=32, epochs=10, validation_data=(x_test, y_test), shuffle=True)

class_labels = ["Plane", "Car", "Bird", "Cat", "Deer", "Dog", "Frog", "Horse", "Boat", "Truck"]

from keras.preprocessing import image
img = image.load_img("cat.png", target_size=(32,32))

"""Convert the image into numpy array"""

image_to_test = image.img_to_array(img) / 255

"""Add a fourth dimension to the image since keras  expects a list of images and not just single image"""

list_of_images = np.expand_dims(image_to_test, axis=0)

"""Make a prediction using the model"""

results = model.predict(list_of_images)

single_result = results[0]

most_likely_class_index = int(np.argmax(single_result))

most_likely_class_index

class_likelihood = single_result[most_likely_class_index]

class_likelihood

class_label = class_labels[most_likely_class_index]

print("This is the image of a {} - likelihood :{:2f}".format(class_label, class_likelihood))

